@page "/CreateUser"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject IUserService UserService

<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <h3>Register</h3>
            <div class="form-group field">
                <label>User name:</label>
                <input type="text" @bind="_username" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(_resultMsg))
                {
                    <label style="color: @_color">@_resultMsg</label>
                }
            </div>
            <div class="form-group field">
                <label>Password:</label>
                <input type="password" @bind="_password" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(_resultMsg))
                {
                    <label style="color: @_color">@_resultMsg</label>
                }
            </div>
            <div class="button-row">
                <button @onclick="Create" disabled="@(string.IsNullOrEmpty(_username))" class="acceptbtn">Register</button>
            </div>
        </div>
</NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>Hello, @context.User.Identity.Name</h3>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string? _username = "";
    private string? _password = "";
    private string _resultMsg = "";
    private string _color = "";

    private async Task Create()
    {
        _resultMsg = "";

        try
        {
            await UserService.Create(new UserCreationDto(_username, _password));
            _username = "";
            _resultMsg = "User successfully created u-lalala";
            _color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _resultMsg = e.Message;
            _color = "red";
        }
    }
}
