@page "/ViewPost/{id:int}"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@inject IPostService PostService
@inject IUserService UserService

<div class="card">
    @if (_users == null)
        {
            <label>Loading users...</label>
        }
        else if (!_users.Any())
        {
            <label>Error in ViewPost</label>
        }
        else if (_dto == null)
        {
            <label>Loading Post data..</label>
        }
    else
        {
            <h3>View Post</h3>
            <div class="form-group field">
                <label>Title: @_dto.Title</label>
            </div>
            <div class="form-group field">
                <label>Body: @_dto.Body</label>
            </div>
        }
        @if (!string.IsNullOrEmpty(_msg))
        {
            <label style="color: red">@_msg</label>
        }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private UpdatedPostDto _dto = null!;
    private string _msg = "";
    private IEnumerable<User>? _users;


	protected override async Task OnInitializedAsync()
    {
		/*why it has to be protected asks jakob*/
        _msg = "";
        try
        {
            _users = await UserService.GetAllUsersAsync();
            PostClearDto postData = await PostService.GetByIdAsync(Id);
            User first = _users.First(user => user.Username.Equals(postData.OwnerName));
            _dto = new UpdatedPostDto(Id) {Title = postData.Title, Body = postData.Body, OwnerId = first.Id, };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
    }
}
